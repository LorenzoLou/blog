<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Domain Driven Design Practical Tutorial</title>
    <url>/blog/2022/05/30/DDD/</url>
    <content><![CDATA[<p>You can click on the <a href="https://lorenzolou.github.io/blog/">Blog Home</a> to browser my blogs and find more interesting<br>content. If there are any issues or suggestions, please feel free to reach out to me or simply submit a merge request<br>on <a href="https://github.com/LorenzoLou">GitHub Link</a></p>
<hr>
<h3 id="What’s-DDD"><a href="#What’s-DDD" class="headerlink" title="What’s DDD?"></a>What’s DDD?</h3><p>DDD(Domain Driven Design) is just a concept, an abstract instruction or direction to help us reduce the complexity of<br>our own application. But because it’s a concept, it has already confused so many developers. We need to implement the<br>concept by ourselves without any restrictions, which means you don’t have a tutorial sample to refer at the beginning.<br>Here we try to provide an implement an application architecture by using DDD concept, but before that, what’s<br>application Architecture?</p>
<h3 id="What’s-Application-Architecture"><a href="#What’s-Application-Architecture" class="headerlink" title="What’s Application Architecture"></a>What’s Application Architecture</h3><p>As we mentioned above, DDD is just a concept, but how we start to develop our own business logics by using this concept?<br>It’s a quite open question which actually does not have a fixed question. But from my perspective, I list the<br>requirements of Application Architecture:</p>
<ol>
<li>Application Architecture should cater kinds of team members in different levels by reduce the communication cost,<br>keep them in the same context, and help us to improve the code quality.</li>
<li>isolate our business codes by any dependencies, for instances the storage logics, the out system api dependencies.</li>
<li>every functionality should be independent and easy to test.</li>
</ol>
<p>here I will provide my own practical experience for you. Hopefully it can benefit you and help you generate your own<br>specific DDD implementations.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h4><p>Let’s say we need to design a system to support users to transfer money.</p>
<h4 id="Development-Requirement-Analise"><a href="#Development-Requirement-Analise" class="headerlink" title="Development Requirement Analise"></a>Development Requirement Analise</h4><ul>
<li>we use h2 as the storage tech stack.</li>
<li>we need to think about the exchange rate.</li>
<li>we have some policy to protect our user from scam.</li>
<li>we can transfer money from accountA to accountB</li>
</ul>
<h4 id="implement-by-using-script-like-coding-style"><a href="#implement-by-using-script-like-coding-style" class="headerlink" title="implement by using script like coding style"></a>implement by using script like coding style</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TransferController &#123;</span><br><span class="line"></span><br><span class="line">    private TransferService transferService;</span><br><span class="line"></span><br><span class="line">    public Result&lt;Boolean&gt; transfer(String targetAccountNumber, BigDecimal amount, HttpSession session) &#123;</span><br><span class="line">        Long userId = (Long) session.getAttribute(&quot;userId&quot;);</span><br><span class="line">        return transferService.transfer(userId, targetAccountNumber, amount, &quot;CNY&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TransferServiceImpl implements TransferService &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TOPIC_AUDIT_LOG = &quot;TOPIC_AUDIT_LOG&quot;;</span><br><span class="line">    private AccountMapper accountDAO;</span><br><span class="line">    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    private YahooForexService yahooForex;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result&lt;Boolean&gt; transfer(Long sourceUserId, String targetAccountNumber, BigDecimal targetAmount, String targetCurrency) &#123;</span><br><span class="line">        // 1. 从数据库读取数据，忽略所有校验逻辑如账号是否存在等</span><br><span class="line">        AccountDO sourceAccountDO = accountDAO.selectByUserId(sourceUserId);</span><br><span class="line">        AccountDO targetAccountDO = accountDAO.selectByAccountNumber(targetAccountNumber);</span><br><span class="line"></span><br><span class="line">        // 2. 业务参数校验</span><br><span class="line">        if (!targetAccountDO.getCurrency().equals(targetCurrency)) &#123;</span><br><span class="line">            throw new InvalidCurrencyException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 3. 获取外部数据，并且包含一定的业务逻辑</span><br><span class="line">        // exchange rate = 1 source currency = X target currency</span><br><span class="line">        BigDecimal exchangeRate = BigDecimal.ONE;</span><br><span class="line">        if (sourceAccountDO.getCurrency().equals(targetCurrency)) &#123;</span><br><span class="line">            exchangeRate = yahooForex.getExchangeRate(sourceAccountDO.getCurrency(), targetCurrency);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal sourceAmount = targetAmount.divide(exchangeRate, RoundingMode.DOWN);</span><br><span class="line"></span><br><span class="line">        // 4. 业务参数校验</span><br><span class="line">        if (sourceAccountDO.getAvailable().compareTo(sourceAmount) &lt; 0) &#123;</span><br><span class="line">            throw new InsufficientFundsException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (sourceAccountDO.getDailyLimit().compareTo(sourceAmount) &lt; 0) &#123;</span><br><span class="line">            throw new DailyLimitExceededException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 5. 计算新值，并且更新字段</span><br><span class="line">        BigDecimal newSource = sourceAccountDO.getAvailable().subtract(sourceAmount);</span><br><span class="line">        BigDecimal newTarget = targetAccountDO.getAvailable().add(targetAmount);</span><br><span class="line">        sourceAccountDO.setAvailable(newSource);</span><br><span class="line">        targetAccountDO.setAvailable(newTarget);</span><br><span class="line"></span><br><span class="line">        // 6. 更新到数据库</span><br><span class="line">        accountDAO.update(sourceAccountDO);</span><br><span class="line">        accountDAO.update(targetAccountDO);</span><br><span class="line"></span><br><span class="line">        // 7. 发送审计消息</span><br><span class="line">        String message = sourceUserId + &quot;,&quot; + targetAccountNumber + &quot;,&quot; + targetAmount + &quot;,&quot; + targetCurrency;</span><br><span class="line">        kafkaTemplate.send(TOPIC_AUDIT_LOG, message);</span><br><span class="line"></span><br><span class="line">        return Result.success(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As we can see this epitomise the typical three layer development approach. But actually there are several big downsides<br>about this type of development.</p>
<ul>
<li>Cost of the maintenance of the system is poor. Every time you’re going to change the verification logics or exchange<br>rate logics or something, you have to update this part of code that involves the parameter verification, storage,<br>compute, calling external service, and so on. For example if we wanna sharding the tables, it will be a disaster.</li>
<li>The scalability of this system is bad. If we wanna add a new transfer function which happens between different bank,<br>none of the codes can be reused.</li>
<li>Very difficult to develop the unit test cases. In this assumption, one method contains the dependency of db, external<br>system, and we need to mock each of them if we just wanna add a unit test case focused on our own business logics.</li>
</ul>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>Why we encountered these issues? the reason behind it is the typical three layer architecture breaks several design<br>principles:</p>
<ul>
<li>Single Responsibility Principle. Let’s say we need to do a sharding to one table, we need to update all the logics<br>related to the dao, do in the service method. That’s a violation of Single Responsibility Principle.</li>
<li>Dependency Inversion Principle. You can see our service depend on the implements of db and external service. Once we<br>wanna do some updates of the db or external service, we have to go through the business service code.</li>
<li>Open Closed Principle. If we wanna add some other logics, for instance bank need to charge for a transfer fee. we have<br>to modify the service code rather than add code.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The main objective of our architecture is we can conform the Dependency Inversion Principle. All the database<br>implementations, all the api implementations, all the web api will depend on the kernel layer(domain). But how we<br>implement it in our case?</p>
<p><img src="/blog/2022/05/30/DDD/Architecture.png"></p>
<p>As we can see, we can start develop from domain layer, all the business logics will depend on the abstractions rather<br>than the specific impleme ntations. The most basic dependency is no longer the database, it’s Domain Layer. Domain Layer<br>doesn’t have any dependency on other external dependencies. For instance, we don’t need to think about what kind of<br>database we need to use, how to design the interaction ways with other external systems when we start to develop our<br>system. All these services will depend on the abstractions(ACL classes and Repository classes defined in domain layer).</p>
<p>From this perspective, web controller, rpc service, databases, external api provided by other systems are all at the<br>same level, all of them depend on the abstractions defined by domain layer.</p>
<h4 id="Infrastructure-Layer"><a href="#Infrastructure-Layer" class="headerlink" title="Infrastructure Layer"></a>Infrastructure Layer</h4><p>First, Let’s have a look at the Infrastructure Layer. The implementation(AccountRepositoryImpl) will depend on the<br>AccountRepository defined in Domain Layer. So when we develop our domain business logics, there is no need for us to<br>think how we communicate with database. Relatively speaking when we development how to implement the<br>AccountRepositoryImpl, we also just need to focus on how to store the domain object(Account).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class AccountRepositoryImpl implements AccountRepository &#123;</span><br><span class="line">    private final InfrastructureConverter infrastructureConverter;</span><br><span class="line">    private final AccountDao accountDao;</span><br><span class="line">    private final BalanceDao balanceDao;</span><br><span class="line">    private final CustomerDao customerDao;</span><br><span class="line">    private final CurrencySystem currencySystem;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long store(Account account) &#123;</span><br><span class="line">        AccountDO accountDO = infrastructureConverter.copy(account);</span><br><span class="line">        CustomerDO customerDO = customerDao.save(accountDO.getCustomerDO());</span><br><span class="line">        BalanceDO balanceDO = balanceDao.save(accountDO.getBalanceDO());</span><br><span class="line">        accountDO.setCustomerDO(customerDO);</span><br><span class="line">        accountDO.setBalanceDO(balanceDO);</span><br><span class="line">        return accountDao.save(accountDO).getAccountNumber();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Account load(Long id) &#123;</span><br><span class="line">        Optional&lt;AccountDO&gt; accountDOOptional = accountDao.findById(id);</span><br><span class="line">        if (accountDOOptional.isEmpty()) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        AccountDO accountDO = accountDOOptional.get();</span><br><span class="line">        Account account = infrastructureConverter.copy(accountDO);</span><br><span class="line">        Customer customer = infrastructureConverter.copy(accountDO.getCustomerDO());</span><br><span class="line">        Money money = infrastructureConverter.copy(accountDO.getBalanceDO());</span><br><span class="line">        account.setBalance(money);</span><br><span class="line">        account.setCustomer(customer);</span><br><span class="line">        account.setCurrencySystem(currencySystem);</span><br><span class="line">        return account;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Anti-Corruption-Layer"><a href="#Anti-Corruption-Layer" class="headerlink" title="Anti Corruption Layer"></a>Anti Corruption Layer</h4><p>Besides, we also put ACL in this Infrastructure Layer, once again, the only thing we need to do is focusing on the<br>domain logics. So in Anti Corruption Layer, we need to convert the objects from external system to the objects defined<br>in our own system.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MockCurrencySystem implements CurrencySystem &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Money toDollar(Money money) &#123;</span><br><span class="line">        Float convertedAmount;</span><br><span class="line">        switch (money.getCurrencyType()) &#123;</span><br><span class="line">            case RMB: convertedAmount = money.getAmount() * 7.8F; break;</span><br><span class="line">            case USD: convertedAmount = money.getAmount(); break;</span><br><span class="line">            default: throw new RuntimeException(&quot;unrecognised currency&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return new Money(CurrencyType.USD, convertedAmount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Domain-Layer"><a href="#Domain-Layer" class="headerlink" title="Domain Layer"></a>Domain Layer</h4><p>In the domain layer, we abstract all the business logics into the domain object.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@AllArgsConstructor</span><br><span class="line">public class Account &#123;</span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    private Long accountNumber;</span><br><span class="line"></span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    private Customer customer;</span><br><span class="line"></span><br><span class="line">    // to simplify this scenario, Let&#x27;s assume that all bank account money is denominated in USD</span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    private Money balance;</span><br><span class="line"></span><br><span class="line">    @Setter</span><br><span class="line">    private CurrencySystem currencySystem;</span><br><span class="line"></span><br><span class="line">    @SneakyThrows</span><br><span class="line">    public void withDraw(Money money) &#123;</span><br><span class="line">        Money withDrawMoney = currencySystem.toDollar(money);</span><br><span class="line">        if (balance.getAmount() &gt;= withDrawMoney.getAmount()) &#123;</span><br><span class="line">            balance.setAmount(balance.getAmount() - withDrawMoney.getAmount());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new Exception(&quot;no enough money&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deposit(Money money) &#123;</span><br><span class="line">        Money depositMoney = currencySystem.toDollar(money);</span><br><span class="line">        balance.setAmount(balance.getAmount() + depositMoney.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In domain service, we abstract all the business logics that not suitable to put in the entity&#x2F;aggregate object. Here we<br>put all the Limit Policies into the domain service. And suppose someday we need to add more limitStrategy, there is no<br>need for us to update the code. All we need to do is adding code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class AccountDomainService &#123;</span><br><span class="line">    private final List&lt;LimitStrategy&gt; limitStrategyList;</span><br><span class="line"></span><br><span class="line">    public void transferMoney(Account source, Account dest, Money money) &#123;</span><br><span class="line">        for (LimitStrategy limitStrategy : limitStrategyList) &#123;</span><br><span class="line">            limitStrategy.allowable(source, dest, money);</span><br><span class="line">        &#125;</span><br><span class="line">        source.withDraw(money);</span><br><span class="line">        dest.deposit(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Application-Layer"><a href="#Application-Layer" class="headerlink" title="Application Layer"></a>Application Layer</h4><p>In the application layer, we can find that the ApplicationService will only coordinate the domain objects and domain<br>service to implement the business logics. And it’s so clean and easy for us to meet other requirements by<br>re-coordinating the domain objects.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class AccountApplicationService &#123;</span><br><span class="line">    private final AccountDomainService accountDomainService;</span><br><span class="line">    private final AccountRepository accountRepository;</span><br><span class="line">    private final AccountFactory accountFactory;</span><br><span class="line"></span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @Transactional</span><br><span class="line">    public void transferMoney(Long sourceAccountNumber, Long destAccountNumber, Money amount) &#123;</span><br><span class="line">        Account source = accountRepository.load(sourceAccountNumber);</span><br><span class="line">        Account dest = accountRepository.load(destAccountNumber);</span><br><span class="line">        if (source == null || dest == null) &#123;</span><br><span class="line">            log.error(&quot;error account number: source &#123;&#125;, dest: &#123;&#125;, amount &#123;&#125;&quot;,</span><br><span class="line">                    sourceAccountNumber, destAccountNumber, amount);</span><br><span class="line">            throw new Exception(&quot;invalid account number&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        accountDomainService.transferMoney(source, dest, amount);</span><br><span class="line">        accountRepository.store(source);</span><br><span class="line">        accountRepository.store(dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void createAccount(AccountDTO accountDTO) &#123;</span><br><span class="line">        Account account = accountFactory.newAccount(accountDTO);</span><br><span class="line">        accountRepository.store(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h4><ul>
<li>test cases in the Domain Layer, are very easy to develop. we just need to mock the external system results.</li>
<li>test cases in the Infrastructure Layer, are also easy for us to develop. we can use test database like h2, and we can<br>also take advantage of JPA test framework to make our test case development easier.</li>
<li>test cases in Biz Layer, can focus on the coordinate work rather than every business approaches. Practically we just<br>mock several cases to make sure that we can cover the application service.</li>
<li>test cases in Adaptor Layer. We can use spring mvc test tools to test the Adaptors.</li>
</ul>
<p>Ideally, each point above we can reach out to 100% coverage.</p>
<h4 id="System-Structure"><a href="#System-Structure" class="headerlink" title="System Structure"></a>System Structure</h4><p>This is the screenshot of our system’s packages.<br><img src="/blog/2022/05/30/DDD/adaptor.png"><br><img src="/blog/2022/05/30/DDD/biz.png"><br><img src="/blog/2022/05/30/DDD/infrastructure.png"><br><img src="/blog/2022/05/30/DDD/domain.png"></p>
<p>And actually we borrowed some good ideas from Clean Architecture, domain layer is located in the right middle of the<br>circal, Coordinate work, application service wraps the domain layer, and provide service to the Adapter Layer(<br>web&#x2F;api&#x2F;rpc). There is a special point, the infrastructure layer will depend on the domain directly.</p>
<p><img src="/blog/2022/05/30/DDD/clean-architecture.png"></p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Let’s say someday we need to add transaction fee when user transfer money to another account. So first thing come up to<br>our mind is we need to modify some code in our domain layer, maybe we need to add some entity, maybe we need to create<br>another dependency on other system, but the most important thing is, we start to think from the domain layer, and then<br>we think about how to implement the abstraction defined by domain layer, how to save the status of domain objects. The<br>way how we develop, is the very proof that why we call it “driven by the domain”.</p>
]]></content>
  </entry>
  <entry>
    <title>Explaination of the principle of Oauth2.0</title>
    <url>/blog/2022/05/30/Principle-of-OAuth2-0/</url>
    <content><![CDATA[<p>You can click on the <a href="../index.md">Blog Home</a> to browser my blogs and find more interesting content. If there are any<br>issues or suggestions, please feel free to reach out to me or simply submit a merge request on<br><a href="https://lorenzolou.github.io/blog/">GitHub Link</a></p>
<hr>
<h3 id="What’s-OAuth"><a href="#What’s-OAuth" class="headerlink" title="What’s OAuth?"></a>What’s OAuth?</h3><p>OAuth is a protocol that designed to protect the user who wanna share their data to third part application or systems.<br>OAuth 2.0 is subsequent version of OAuth 1.0, mostly we use OAuth 2.0 nowadays.</p>
<h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p>Let’s say when we’re going to log in YOUTUBE by using the account of GOOGLE</p>
<h4 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h4><p>In this case some here are the professional introduction of terms we may use.</p>
<ul>
<li>Resource Server: In this case, YOUTUBE is going to get the username, profile, avatar from GOOGLE, so we call GOOGLE<br>service which stored this kind of user information as Resource Server</li>
<li>Resource Owner: Denotes the user here.</li>
<li>Client: Denotes YOUTUBE here.</li>
<li>Authorization Server: In this case, it should be the server of GOOGLE also.(we just differentiate Authorization Server<br>with Resource Service logically, they can be provided by a same server)</li>
<li>Useragent: The browser you use when you’re browsing the YOUTUBE videos.</li>
</ul>
<p>Base on authorization code mode</p>
<p><img src="/blog/2022/05/30/Principle-of-OAuth2-0/OAuth2.0-Diagram.drawio.svg"></p>
<p>if your application is based on frontend and backend separation architecture, then every request you send should involve<br>the token.</p>
<p>For more details<br>see <a href="https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">Basic writing and formatting syntax</a><br>.</p>
<h3 id="AUTH-MODE"><a href="#AUTH-MODE" class="headerlink" title="AUTH MODE"></a>AUTH MODE</h3><p>We have 5 kinds of authorization modes.</p>
<ol>
<li>Authorization code</li>
<li>Implicit</li>
<li>Resource Owner Password Credentials</li>
<li>Client Credentials</li>
</ol>
<p>Authorization Code Mode is the most functional, secure and commonly used mode in our projects. So in our next blog we<br>prepared Resource Service, Auth Service, and Client in which we use Spring Security to implement the OAuth 2.0 protocol<br>and help us understand all the details related the OAuth 2.0.</p>
<p><a href="./Using%20Spring%20Security%20to%20implement%20OAuth2.0.md">How to implement OAuth by Using Spring Security Framework</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2022/05/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Zookeeper Introduction</title>
    <url>/blog/2022/06/19/Zookeeper-Election/</url>
    <content><![CDATA[<p>You can click on the <a href="../index.md">Blog Home</a> to browser my blogs and find more interesting content. If there are any issues or suggestions, please feel free to reach out to me or simply submit a merge request on<br><a href="https://lorenzolou.github.io/blog/">GitHub Link</a></p>
<hr>
<h3 id="What’s-zookeeper"><a href="#What’s-zookeeper" class="headerlink" title="What’s zookeeper?"></a>What’s zookeeper?</h3><p>Zookeeper is a distributed system. In most cases, zookeeper acts as a coordinator, rather than a storage or message queue. For instance, let’s say we wanna inform other systems after we have done some stuffs, in this scerario, we can create a path as a signal on zabbix, and systems which want to know the events can subscribe the path event. It’s a powful coordinator providing data consistency services and most important as it is a distributed system, it also conform to the CAP rules.</p>
<h3 id="What’s-CAP"><a href="#What’s-CAP" class="headerlink" title="What’s CAP?"></a>What’s CAP?</h3><p>Theoretically, the CAP theorem, also known as Brewer’s theorem, states that it is impossible for a distributed computing system to satisfy the following three points at the same time: </p>
<ul>
<li>Consistence (all nodes can access the same latest copy of data) </li>
<li>Availability (every request can get a non-error response in a certain period of time - but the data obtained is not guaranteed to be the latest data)</li>
<li>Partition fault tolerance (Network partitioning) (System can always keep in consistency in a certain period of time. For instance, the network split into two regions, System can only choose to provide the service but with inconsistent data or stop providing service to keep the data consistent. That means If the node on one side of the partition is set to be unavailable in order to keep data consistency, the item A will fail. If two nodes can communicate with each other, both C and A can be guaranteed, but this leads to the loss of the Item C.)</li>
</ul>
<h3 id="How-zookeeper-keep-data-consistency"><a href="#How-zookeeper-keep-data-consistency" class="headerlink" title="How zookeeper keep data consistency?"></a>How zookeeper keep data consistency?</h3><p>Before we discuss of the data consistency, we must understand the principle of zookeeper’s election. Here is some specialist terms:</p>
<ul>
<li>Leader, responsible for all the transaction requests, like data update, data add, and so forth.</li>
<li>Follower, responsible for the non-transaction requests, like data query.</li>
<li>ZXID, ZooKeeper Transaction Id, denotes the latest data version one node has.</li>
</ul>
<p>Let’s assume we have three nodes, only if we elect the leader then the cluster can continue to work. So how they elect the leader?</p>
<ol>
<li>Choose a node with the latest data version(ZXID). When the election start, each node deem themself as the node with latest ZXID. They will sign their Identifier Card number (SID) on the vote and broadcast vote requests for themselves. Actually the reason why they gotta broadcast requests is every vode has their own vote ballot box.</li>
<li>It’s Kinda different from the way we human vote. Each node of the zabbix cluster mantain a ballot box. As each node will send their vote to all the nodes cluster has, so all the nodes will hold the same votes eventually.</li>
<li>They will try to find the one who holds the most votes will be the leader. Of cause there is a precondition, the number of votes leader hold must be more than half of the current cluster.</li>
</ol>
<h4 id="Election-Analysis"><a href="#Election-Analysis" class="headerlink" title="Election Analysis"></a>Election Analysis</h4><p>Let’s jump int the code. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   public interface Election &#123;</span><br><span class="line"></span><br><span class="line">    Vote lookForLeader() throws InterruptedException;</span><br><span class="line">    void shutdown();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This <code>Election</code> interface is very important, zookeeper implement the interface by developed a class called <code>FastLeaderElection</code> , let’s jump into the makeOffer()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Messages that a peer wants to send to other peers.</span><br><span class="line"> * These messages can be both Notifications and Acks</span><br><span class="line"> * of reception of notification.</span><br><span class="line"> */</span><br><span class="line">public static class ToSend &#123;...&#125;</span><br><span class="line"></span><br><span class="line">LinkedBlockingQueue&lt;ToSend&gt; sendqueue;</span><br><span class="line">LinkedBlockingQueue&lt;Notification&gt; recvqueue;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Multi-threaded implementation of message handler. Messenger</span><br><span class="line"> * implements two sub-classes: WorkReceiver and  WorkSender. The</span><br><span class="line"> * functionality of each is obvious from the name. Each of these</span><br><span class="line"> * spawns a new thread.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">protected class Messenger &#123;...&#125;</span><br><span class="line"></span><br><span class="line">QuorumPeer self;</span><br><span class="line">Messenger messenger;</span><br><span class="line">AtomicLong logicalclock = new AtomicLong(); /* Election instance */</span><br><span class="line">long proposedLeader;</span><br><span class="line">long proposedZxid;</span><br><span class="line">long proposedEpoch;</span><br></pre></td></tr></table></figure>

<p>The most important thing is you can see that <code>FastLeaderElection</code> use the most typical Composite Pattern. It include <code>QuorumPeer</code>, which mainly involve all the core logics of ZK election. Let’s jump into <code>QuorumPeer</code> to investigate.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public synchronized void start() &#123;</span><br><span class="line">    if (!getView().containsKey(myid)) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;My id &quot; + myid + &quot; not in the peer list&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    loadDataBase();</span><br><span class="line">    startServerCnxnFactory();</span><br><span class="line">    try &#123;</span><br><span class="line">        adminServer.start();</span><br><span class="line">    &#125; catch (AdminServerException e) &#123;</span><br><span class="line">        LOG.warn(&quot;Problem starting AdminServer&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line">    startLeaderElection();</span><br><span class="line">    startJvmPauseMonitor();</span><br><span class="line">    super.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public synchronized void startLeaderElection() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (getPeerState() == ServerState.LOOKING) &#123;</span><br><span class="line">            currentVote = new Vote(myid, getLastLoggedZxid(), getCurrentEpoch());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        RuntimeException re = new RuntimeException(e.getMessage());</span><br><span class="line">        re.setStackTrace(e.getStackTrace());</span><br><span class="line">        throw re;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.electionAlg = createElectionAlgorithm(electionType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>actually in <code>createElectionAlgorithm</code>, it composite a <code>FastLeaderElection</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case LOOKING:</span><br><span class="line">    if (getInitLastLoggedZxid() == -1) &#123;</span><br><span class="line">        LOG.debug(&quot;Ignoring notification as our zxid is -1&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    if (n.zxid == -1) &#123;</span><br><span class="line">        LOG.debug(&quot;Ignoring notification from member with -1 zxid &#123;&#125;&quot;, n.sid);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    // If notification &gt; current, replace and send messages out</span><br><span class="line">    if (n.electionEpoch &gt; logicalclock.get()) &#123;</span><br><span class="line">        logicalclock.set(n.electionEpoch);</span><br><span class="line">        recvset.clear();</span><br><span class="line">        if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class="line">            updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">        &#125;</span><br><span class="line">        sendNotifications();</span><br><span class="line">    &#125; else if (n.electionEpoch &lt; logicalclock.get()) &#123;</span><br><span class="line">            LOG.debug(</span><br><span class="line">                &quot;Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x&#123;&#125;, logicalclock=0x&#123;&#125;&quot;,</span><br><span class="line">                Long.toHexString(n.electionEpoch),</span><br><span class="line">                Long.toHexString(logicalclock.get()));</span><br><span class="line">        break;</span><br><span class="line">    &#125; else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">        sendNotifications();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOG.debug(</span><br><span class="line">        &quot;Adding vote: from=&#123;&#125;, proposed leader=&#123;&#125;, proposed zxid=0x&#123;&#125;, proposed election epoch=0x&#123;&#125;&quot;,</span><br><span class="line">        n.sid,</span><br><span class="line">        n.leader,</span><br><span class="line">        Long.toHexString(n.zxid),</span><br><span class="line">        Long.toHexString(n.electionEpoch));</span><br><span class="line"></span><br><span class="line">    // don&#x27;t care about the version if it&#x27;s in LOOKING state</span><br><span class="line">    recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class="line"></span><br><span class="line">    voteSet = getVoteTracker(recvset, new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch));</span><br><span class="line"></span><br><span class="line">    if (voteSet.hasAllQuorums()) &#123;</span><br><span class="line"></span><br><span class="line">        // Verify if there is any change in the proposed leader</span><br><span class="line">        while ((n = recvqueue.poll(finalizeWait, TimeUnit.MILLISECONDS)) != null) &#123;</span><br><span class="line">            if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">                recvqueue.put(n);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * This predicate is true once we don&#x27;t read any new</span><br><span class="line">         * relevant message from the reception queue</span><br><span class="line">         */</span><br><span class="line">        if (n == null) &#123;</span><br><span class="line">            setPeerState(proposedLeader, voteSet);</span><br><span class="line">            Vote endVote = new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);</span><br><span class="line">            leaveInstance(endVote);</span><br><span class="line">            return endVote;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Check if a pair (server id, zxid) succeeds our</span><br><span class="line"> * current vote.</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">protected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) &#123;</span><br><span class="line"></span><br><span class="line">    if (self.getQuorumVerifier().getWeight(newId) == 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return ((newEpoch &gt; curEpoch)</span><br><span class="line">            || ((newEpoch == curEpoch)</span><br><span class="line">                &amp;&amp; ((newZxid &gt; curZxid)</span><br><span class="line">                    || ((newZxid == curZxid)</span><br><span class="line">                        &amp;&amp; (newId &gt; curId)))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>this is right part we refered to in the former section. </p>
<ol>
<li>if new epoch is higher, update vote as the new one.</li>
<li>if new epoch is the same as current epoch, but new zxid is higher, update vote as the new one.</li>
<li>if new epoch is the same as current epoch, new zxid is the same, update vote as the new one.</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (voteSet.hasAllQuorums()) &#123;</span><br><span class="line"></span><br><span class="line">    // Verify if there is any change in the proposed leader</span><br><span class="line">    while ((n = recvqueue.poll(finalizeWait, TimeUnit.MILLISECONDS)) != null) &#123;</span><br><span class="line">        if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">            recvqueue.put(n);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * This predicate is true once we don&#x27;t read any new</span><br><span class="line">     * relevant message from the reception queue</span><br><span class="line">     */</span><br><span class="line">    if (n == null) &#123;</span><br><span class="line">        setPeerState(proposedLeader, voteSet);</span><br><span class="line">        Vote endVote = new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);</span><br><span class="line">        leaveInstance(endVote);</span><br><span class="line">        return endVote;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
</search>
