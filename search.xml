<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Domain Driven Design Practical Tutorial</title>
    <url>/blog/2022/05/30/DDD/</url>
    <content><![CDATA[<p>You can click on the <a href="https://lorenzolou.github.io/blog/">Blog Home</a> to browser my blogs and find more interesting<br>content. If there are any issues or suggestions, please feel free to reach out to me or simply submit a merge request on<br><a href="https://github.com/LorenzoLou">GitHub Link</a></p>
<hr>
<h3 id="What’s-DDD"><a href="#What’s-DDD" class="headerlink" title="What’s DDD?"></a>What’s DDD?</h3><p>DDD(Domain Driven Design) is just a concept, an abstract instruction or direction to help us reduce the complexity of<br>our own application. But because it’s a concept, it has already confused so many developers. We need to implement the<br>concept by ourselves without any restrictions, which means you don’t have a tutorial sample to refer at the beginning.<br>Here we try to provide an implement an application architecture by using DDD concept, but before that, what’s<br>application Architecture?</p>
<h3 id="What’s-Application-Architecture"><a href="#What’s-Application-Architecture" class="headerlink" title="What’s Application Architecture"></a>What’s Application Architecture</h3><p>As we mentioned above, DDD is just a concept, but how we start to develop our own business logics by using this concept?<br>It’s a quite open question which actually does not have a fixed question. But from my perspective, I list the<br>requirements of Application Architecture:</p>
<ol>
<li>Application Architecture should cater kinds of team members in different levels by reduce the communication cost,<br>keep them in the same context, and help us to improve the code quality.</li>
<li>isolate our business codes by any dependencies, for instances the storage logics, the out system api dependencies.</li>
<li>every functionality should be independent and easy to test.</li>
</ol>
<p>here I will provide my own practical experience for you. Hopefully it can benefit you and help you generate your own<br>specific DDD implementations.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h4><p>Let’s say we need to design a system to support users to transfer money.</p>
<h4 id="Development-Requirement-Analise"><a href="#Development-Requirement-Analise" class="headerlink" title="Development Requirement Analise"></a>Development Requirement Analise</h4><ul>
<li>we use h2 as the storage tech stack.</li>
<li>we need to think about the exchange rate.</li>
<li>we have some policy to protect our user from scam.</li>
<li>we can transfer money from accountA to accountB</li>
</ul>
<h4 id="implement-by-using-script-like-coding-style"><a href="#implement-by-using-script-like-coding-style" class="headerlink" title="implement by using script like coding style"></a>implement by using script like coding style</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TransferController &#123;</span><br><span class="line"></span><br><span class="line">    private TransferService transferService;</span><br><span class="line"></span><br><span class="line">    public Result&lt;Boolean&gt; transfer(String targetAccountNumber, BigDecimal amount, HttpSession session) &#123;</span><br><span class="line">        Long userId = (Long) session.getAttribute(&quot;userId&quot;);</span><br><span class="line">        return transferService.transfer(userId, targetAccountNumber, amount, &quot;CNY&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TransferServiceImpl implements TransferService &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TOPIC_AUDIT_LOG = &quot;TOPIC_AUDIT_LOG&quot;;</span><br><span class="line">    private AccountMapper accountDAO;</span><br><span class="line">    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    private YahooForexService yahooForex;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result&lt;Boolean&gt; transfer(Long sourceUserId, String targetAccountNumber, BigDecimal targetAmount, String targetCurrency) &#123;</span><br><span class="line">        // 1. 从数据库读取数据，忽略所有校验逻辑如账号是否存在等</span><br><span class="line">        AccountDO sourceAccountDO = accountDAO.selectByUserId(sourceUserId);</span><br><span class="line">        AccountDO targetAccountDO = accountDAO.selectByAccountNumber(targetAccountNumber);</span><br><span class="line"></span><br><span class="line">        // 2. 业务参数校验</span><br><span class="line">        if (!targetAccountDO.getCurrency().equals(targetCurrency)) &#123;</span><br><span class="line">            throw new InvalidCurrencyException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 3. 获取外部数据，并且包含一定的业务逻辑</span><br><span class="line">        // exchange rate = 1 source currency = X target currency</span><br><span class="line">        BigDecimal exchangeRate = BigDecimal.ONE;</span><br><span class="line">        if (sourceAccountDO.getCurrency().equals(targetCurrency)) &#123;</span><br><span class="line">            exchangeRate = yahooForex.getExchangeRate(sourceAccountDO.getCurrency(), targetCurrency);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal sourceAmount = targetAmount.divide(exchangeRate, RoundingMode.DOWN);</span><br><span class="line"></span><br><span class="line">        // 4. 业务参数校验</span><br><span class="line">        if (sourceAccountDO.getAvailable().compareTo(sourceAmount) &lt; 0) &#123;</span><br><span class="line">            throw new InsufficientFundsException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (sourceAccountDO.getDailyLimit().compareTo(sourceAmount) &lt; 0) &#123;</span><br><span class="line">            throw new DailyLimitExceededException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 5. 计算新值，并且更新字段</span><br><span class="line">        BigDecimal newSource = sourceAccountDO.getAvailable().subtract(sourceAmount);</span><br><span class="line">        BigDecimal newTarget = targetAccountDO.getAvailable().add(targetAmount);</span><br><span class="line">        sourceAccountDO.setAvailable(newSource);</span><br><span class="line">        targetAccountDO.setAvailable(newTarget);</span><br><span class="line"></span><br><span class="line">        // 6. 更新到数据库</span><br><span class="line">        accountDAO.update(sourceAccountDO);</span><br><span class="line">        accountDAO.update(targetAccountDO);</span><br><span class="line"></span><br><span class="line">        // 7. 发送审计消息</span><br><span class="line">        String message = sourceUserId + &quot;,&quot; + targetAccountNumber + &quot;,&quot; + targetAmount + &quot;,&quot; + targetCurrency;</span><br><span class="line">        kafkaTemplate.send(TOPIC_AUDIT_LOG, message);</span><br><span class="line"></span><br><span class="line">        return Result.success(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As we can see this epitomise the typical three layer development approach. But actually there are several big downsides<br>about this type of development.</p>
<ul>
<li>Cost of the maintenance of the system is poor. Every time you’re going to change the verification logics or exchange<br>rate logics or something, you have to update this part of code that involves the parameter verification, storage,<br>compute, calling external service, and so on. For example if we wanna sharding the tables, it will be a disaster.</li>
<li>The scalability of this system is bad. If we wanna add a new transfer function which happens between different bank,<br>none of the codes can be reused.</li>
<li>Very difficult to develop the unit test cases. In this assumption, one method contains the dependency of db, external<br>system, and we need to mock each of them if we just wanna add a unit test case focused on our own business logics.</li>
</ul>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>Why we encountered these issues? the reason behind it is the typical three layer architecture breaks several design<br>principles:</p>
<ul>
<li>Single Responsibility Principle</li>
<li>Dependency Inversion Principle</li>
<li>Open Closed Principle</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The main objective of our architecture is we can conform the Dependency Inversion Principle. All the database<br>implementations, all the api implementations, all the web api will depend on the kernel layer(domain). But how we<br>implement it in our case?</p>
<p><img src="/blog/2022/05/30/DDD/clean-architecture.png"></p>
<p>As we can see, we can start develop from domain layer, all the business logics will depend on the abstractions rather<br>than the specific implementations.</p>
<p>In the infrastructure layer, we can see that<br>最底层不再是数据库，而是Entity、Domain Primitive和Domain Service。这些对象不依赖任何外部服务和框架，而是纯内存中的数据和操作。这些对象我们打包为Domain<br>Layer（领域层）。领域层没有任何外部依赖关系。 再其次的是负责组件编排的Application<br>Service，但是这些服务仅仅依赖了一些抽象出来的ACL类和Repository类，而其具体实现类是通过依赖注入注进来的。Application Service、Repository、ACL等我们统称为Application<br>Layer（应用层）。应用层 依赖 领域层，但不依赖具体实现。 最后是ACL，Repository等的具体实现，这些实现通常依赖外部具体的技术实现和框架，所以统称为Infrastructure<br>Layer（基础设施层）。Web框架里的对象如Controller之类的通常也属于基础设施层。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class AccountRepositoryImpl implements AccountRepository &#123;</span><br><span class="line">    private final InfrastructureConverter infrastructureConverter;</span><br><span class="line">    private final AccountDao accountDao;</span><br><span class="line">    private final BalanceDao balanceDao;</span><br><span class="line">    private final CustomerDao customerDao;</span><br><span class="line">    private final CurrencySystem currencySystem;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long store(Account account) &#123;</span><br><span class="line">        AccountDO accountDO = infrastructureConverter.copy(account);</span><br><span class="line">        CustomerDO customerDO = customerDao.save(accountDO.getCustomerDO());</span><br><span class="line">        BalanceDO balanceDO = balanceDao.save(accountDO.getBalanceDO());</span><br><span class="line">        accountDO.setCustomerDO(customerDO);</span><br><span class="line">        accountDO.setBalanceDO(balanceDO);</span><br><span class="line">        return accountDao.save(accountDO).getAccountNumber();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Account load(Long id) &#123;</span><br><span class="line">        Optional&lt;AccountDO&gt; accountDOOptional = accountDao.findById(id);</span><br><span class="line">        if (accountDOOptional.isEmpty()) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        AccountDO accountDO = accountDOOptional.get();</span><br><span class="line">        Account account = infrastructureConverter.copy(accountDO);</span><br><span class="line">        Customer customer = infrastructureConverter.copy(accountDO.getCustomerDO());</span><br><span class="line">        Money money = infrastructureConverter.copy(accountDO.getBalanceDO());</span><br><span class="line">        account.setBalance(money);</span><br><span class="line">        account.setCustomer(customer);</span><br><span class="line">        account.setCurrencySystem(currencySystem);</span><br><span class="line">        return account;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>In the domain layer, we abstract all the business logics into the domain object.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@AllArgsConstructor</span><br><span class="line">public class Account &#123;</span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    private Long accountNumber;</span><br><span class="line"></span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    private Customer customer;</span><br><span class="line"></span><br><span class="line">    // to simplify this scenario, Let&#x27;s assume that all bank account money is denominated in USD</span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    private Money balance;</span><br><span class="line"></span><br><span class="line">    @Setter</span><br><span class="line">    private CurrencySystem currencySystem;</span><br><span class="line"></span><br><span class="line">    @SneakyThrows</span><br><span class="line">    public void withDraw(Money money) &#123;</span><br><span class="line">        Money withDrawMoney = currencySystem.toDollar(money);</span><br><span class="line">        if (balance.getAmount() &gt;= withDrawMoney.getAmount()) &#123;</span><br><span class="line">            balance.setAmount(balance.getAmount() - withDrawMoney.getAmount());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new Exception(&quot;no enough money&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deposit(Money money) &#123;</span><br><span class="line">        Money depositMoney = currencySystem.toDollar(money);</span><br><span class="line">        balance.setAmount(balance.getAmount() + depositMoney.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In domain service, we abstract all the business logics that not suitable to put in the entity&#x2F;aggregate object. Here we<br>put all the Limit Policies into the domain service. And suppose someday we need to add more limitStrategy, there is no<br>need for us to update the code. All we need to do is adding code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class AccountDomainService &#123;</span><br><span class="line">    private final List&lt;LimitStrategy&gt; limitStrategyList;</span><br><span class="line"></span><br><span class="line">    public void transferMoney(Account source, Account dest, Money money) &#123;</span><br><span class="line">        for (LimitStrategy limitStrategy : limitStrategyList) &#123;</span><br><span class="line">            limitStrategy.allowable(source, dest, money);</span><br><span class="line">        &#125;</span><br><span class="line">        source.withDraw(money);</span><br><span class="line">        dest.deposit(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>So in the application layer, we can find that the ApplicationService will only coordinate the domain objects and domain<br>service to implement the business logics. And it’s so clean and easy for us to meet other requirements by<br>re-coordinating the domain objects.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class AccountApplicationService &#123;</span><br><span class="line">    private final AccountDomainService accountDomainService;</span><br><span class="line">    private final AccountRepository accountRepository;</span><br><span class="line">    private final AccountFactory accountFactory;</span><br><span class="line"></span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @Transactional</span><br><span class="line">    public void transferMoney(Long sourceAccountNumber, Long destAccountNumber, Money amount) &#123;</span><br><span class="line">        Account source = accountRepository.load(sourceAccountNumber);</span><br><span class="line">        Account dest = accountRepository.load(destAccountNumber);</span><br><span class="line">        if (source == null || dest == null) &#123;</span><br><span class="line">            log.error(&quot;error account number: source &#123;&#125;, dest: &#123;&#125;, amount &#123;&#125;&quot;,</span><br><span class="line">                    sourceAccountNumber, destAccountNumber, amount);</span><br><span class="line">            throw new Exception(&quot;invalid account number&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        accountDomainService.transferMoney(source, dest, amount);</span><br><span class="line">        accountRepository.store(source);</span><br><span class="line">        accountRepository.store(dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void createAccount(AccountDTO accountDTO) &#123;</span><br><span class="line">        Account account = accountFactory.newAccount(accountDTO);</span><br><span class="line">        accountRepository.store(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/blog/2022/05/30/DDD/clean-architecture.png"></p>
<h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Let’s say someday we need to add transaction fee when user transfer money to another account. So first thing come up to<br>our mind is we need to modify some code in our domain layer, maybe we need to add some entity, maybe we need to create<br>another dependency on other system, but the most important thing is, we start to think from the domain layer, and then<br>we think about how to implement the abstraction defined by domain layer, how to save the status of domain objects. The<br>way how we develop, is the very proof that why we call it “driven by the domain” </p>
]]></content>
  </entry>
  <entry>
    <title>Explaination of the principle of Oauth2.0</title>
    <url>/blog/2022/05/30/Principle-of-OAuth2-0/</url>
    <content><![CDATA[<p>You can click on the <a href="../index.md">Blog Home</a> to browser my blogs and find more interesting content. If there are any<br>issues or suggestions, please feel free to reach out to me or simply submit a merge request on<br><a href="https://lorenzolou.github.io/blog/">GitHub Link</a></p>
<hr>
<h3 id="What’s-OAuth"><a href="#What’s-OAuth" class="headerlink" title="What’s OAuth?"></a>What’s OAuth?</h3><p>OAuth is a protocol that designed to protect the user who wanna share their data to third part application or systems.<br>OAuth 2.0 is subsequent version of OAuth 1.0, mostly we use OAuth 2.0 nowadays.</p>
<h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p>Let’s say when we’re going to log in YOUTUBE by using the account of GOOGLE</p>
<h4 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h4><p>In this case some here are the professional introduction of terms we may use.</p>
<ul>
<li>Resource Server: In this case, YOUTUBE is going to get the username, profile, avatar from GOOGLE, so we call GOOGLE<br>service which stored this kind of user information as Resource Server</li>
<li>Resource Owner: Denotes the user here.</li>
<li>Client: Denotes YOUTUBE here.</li>
<li>Authorization Server: In this case, it should be the server of GOOGLE also.(we just differentiate Authorization Server<br>with Resource Service logically, they can be provided by a same server)</li>
<li>Useragent: The browser you use when you’re browsing the YOUTUBE videos.</li>
</ul>
<p>Base on authorization code mode</p>
<p><img src="/blog/2022/05/30/Principle-of-OAuth2-0/OAuth2.0-Diagram.drawio.svg"></p>
<p>if your application is based on frontend and backend separation architecture, then every request you send should involve<br>the token.</p>
<p>For more details<br>see <a href="https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">Basic writing and formatting syntax</a><br>.</p>
<h3 id="AUTH-MODE"><a href="#AUTH-MODE" class="headerlink" title="AUTH MODE"></a>AUTH MODE</h3><p>We have 5 kinds of authorization modes.</p>
<ol>
<li>Authorization code</li>
<li>Implicit</li>
<li>Resource Owner Password Credentials</li>
<li>Client Credentials</li>
</ol>
<p>Authorization Code Mode is the most functional, secure and commonly used mode in our projects. So in our next blog we<br>prepared Resource Service, Auth Service, and Client in which we use Spring Security to implement the OAuth 2.0 protocol<br>and help us understand all the details related the OAuth 2.0.</p>
<p><a href="./Using%20Spring%20Security%20to%20implement%20OAuth2.0.md">How to implement OAuth by Using Spring Security Framework</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2022/05/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
